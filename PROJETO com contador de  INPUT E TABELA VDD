// OLHA IF DO NOMES NOT, AND, OR, NAND, NOR, XOR, XNOR, PRA COLOCAR OS !=
#include <stdio.h>
#include <math.h>
#include<string.h>


int main()
	
#define TAMNOME 70
#define ANDCERTO 2
#define NANDCERTO 2
#define NORCERTO 0
#define XORCERTO 1
#define XNORCERTO 1
{
    int entrada1, entrada2, saida, i, local1, local2;
    char nome[TAMNOME], resultados[10];
    unsigned int input=0;
    char endereco[70];
    
    for (i=0;i<=10;i++) {
    	
        resultados[i]=1;
    }
    
   puts("Digite o endereço completo do arquivo");
   scanf("%s", &endereco);
   
    FILE* arqNome=fopen(endereco, "r");
 //   FILE* arqNome=fopen("C:/Users/Fernando/Desktop/nomes.txt", "r");
 
 
    while (fscanf(arqNome, "%s %d %d %d", nome, &entrada1, &entrada2, &saida)!=EOF) {
        local1=resultados[entrada1];
        local2=resultados[entrada2];
        
        for (i=0;i<=TAMNOME;i++) {
            //O do AND TÁ OK
            if(nome[i]=='a' && nome[i+1]=='n' && nome[i+2]=='d' && nome[i-1]!='n'){
                if(local1+local2==ANDCERTO){
                    resultados[saida]=1;
                }
                else {
                    resultados[saida]=0;
                }
            }
            //O do OR TÁ OK
            if(nome[i]=='o' && nome[i+1]=='r' && nome[i-1]!='x' && nome[i-1]!='n' && nome[i-1]!='x'){
                if(local1+local2>=1){
                    resultados[saida]=1;
                    printf("krl");
                }
                else {
                    resultados[saida]=0;
                }
            }
            //A PARTI DAQUI É SÓ TEORIA KKK
            // NAND TÁ "CERTO"
            if(nome[i]=='n' && nome[i+1]=='a' && nome[i+2]=='n' && nome[i+3]=='d'){
                if(local1+local2==NANDCERTO){
                    resultados[saida]=0;
                }
                else {
                    resultados[saida]=1;
                }
            }
            // NOR CERTO
            if(nome[i]=='n' && nome[i+1]=='o' && nome[i+2]=='r'){
                if(local1+local2==NORCERTO){
                    resultados[saida]=1;
                }
                else {
                    resultados[saida]=0;
                }
            }
            // XOR CERTO
            if(nome[i]=='x' && nome[i+1]=='o' && nome[i+2]=='r'){
                if(local1+local2==XORCERTO){
                    resultados[saida]=1;
                    
                }
                else {
                    resultados[saida]=0;
                }
            }
            if(nome[i]=='x' && nome[i+1]=='n' && nome[i+2]=='0' && nome[i+3]){
                if(local1+local2==XNORCERTO){
                    resultados[saida]=0;
                }
                else {
                    resultados[saida]=1;
                }
            }
				if(nome[i]=='I' && nome[i+1]=='N' && nome[i+2]=='P'){
					input++;
				}
        }
        printf("%s %d %d %d\n", nome, entrada1, entrada2, saida);

    }
    
    printf("\n\n inputs igual %d \n",input);
    
 	puts("\nA tabela verdade para o programa e:");
 	//--------------------------------------------------------
 	 int qnt, j;
 	 qnt=input; //trocar qnt por input dps
 	 
 	 int entrada;
 	 char vet[26];
 	 
 	 
 	 for(entrada = 0; entrada < (pow(2,qnt)); entrada++) {
        vet[0 ] = (entrada & 1       )?1:0;      /*   // x ? a:b <=> if(x) a; else b;*/
        vet[1 ] = (entrada & 2       )?1:0;      /*   // inline if*/
        vet[2 ] = (entrada & 4       )?1:0;
        vet[3 ] = (entrada & 8       )?1:0;
        vet[4 ] = (entrada & 16      )?1:0;
        vet[5 ] = (entrada & 32      )?1:0;
        vet[6 ] = (entrada & 64      )?1:0;
        vet[7 ] = (entrada & 128     )?1:0;
        vet[8 ] = (entrada & 256     )?1:0;
        vet[9 ] = (entrada & 512     )?1:0;
        vet[10] = (entrada & 1024    )?1:0;
        vet[11] = (entrada & 2048    )?1:0;
        vet[12] = (entrada & 4096    )?1:0;
        vet[13] = (entrada & 8192    )?1:0;
        vet[14] = (entrada & 16384   )?1:0;
        vet[15] = (entrada & 32768   )?1:0;
        vet[16] = (entrada & 65536   )?1:0;
        vet[17] = (entrada & 131072  )?1:0;
        vet[18] = (entrada & 262144  )?1:0;
        vet[19] = (entrada & 524288  )?1:0;
        vet[20] = (entrada & 1048576 )?1:0;
        vet[21] = (entrada & 2097152 )?1:0;
        vet[22] = (entrada & 4194304 )?1:0;
        vet[23] = (entrada & 8388608 )?1:0;
        vet[24] = (entrada & 16777216)?1:0;
        vet[25] = (entrada & 33554432)?1:0;
        printf("  ");
        for(j=0;j<qnt;j++){
            printf("%d ",vet[j]);
        }
        printf("\n");
 	
 	
    
    fclose(arqNome);
}
}
